/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FlashLoanInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTrade"
      | "owner"
      | "receiveFlashLoan"
      | "sRouter"
      | "uRouter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LoanedReturned"
      | "SwappedOnSushiswap"
      | "SwappedOnUniswap"
      | "TradeExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [boolean, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "sRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "uRouter", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uRouter", data: BytesLike): Result;
}

export namespace LoanedReturnedEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, token: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedOnSushiswapEvent {
  export type InputTuple = [
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    path0: AddressLike,
    path1: AddressLike
  ];
  export type OutputTuple = [
    amountIn: bigint,
    amountOut: bigint,
    path0: string,
    path1: string
  ];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
    path0: string;
    path1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedOnUniswapEvent {
  export type InputTuple = [
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    path0: AddressLike,
    path1: AddressLike
  ];
  export type OutputTuple = [
    amountIn: bigint,
    amountOut: bigint,
    path0: string,
    path1: string
  ];
  export interface OutputObject {
    amountIn: bigint;
    amountOut: bigint;
    path0: string;
    path1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    token: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    sender: string;
    token: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashLoan extends BaseContract {
  connect(runner?: ContractRunner | null): FlashLoan;
  waitForDeployment(): Promise<this>;

  interface: FlashLoanInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTrade: TypedContractMethod<
    [
      _startOnUniswap: boolean,
      _token0: AddressLike,
      _token1: AddressLike,
      _flashAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sRouter: TypedContractMethod<[], [string], "view">;

  uRouter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      _startOnUniswap: boolean,
      _token0: AddressLike,
      _token1: AddressLike,
      _flashAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      userData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uRouter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LoanedReturned"
  ): TypedContractEvent<
    LoanedReturnedEvent.InputTuple,
    LoanedReturnedEvent.OutputTuple,
    LoanedReturnedEvent.OutputObject
  >;
  getEvent(
    key: "SwappedOnSushiswap"
  ): TypedContractEvent<
    SwappedOnSushiswapEvent.InputTuple,
    SwappedOnSushiswapEvent.OutputTuple,
    SwappedOnSushiswapEvent.OutputObject
  >;
  getEvent(
    key: "SwappedOnUniswap"
  ): TypedContractEvent<
    SwappedOnUniswapEvent.InputTuple,
    SwappedOnUniswapEvent.OutputTuple,
    SwappedOnUniswapEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;

  filters: {
    "LoanedReturned(address,address,uint256)": TypedContractEvent<
      LoanedReturnedEvent.InputTuple,
      LoanedReturnedEvent.OutputTuple,
      LoanedReturnedEvent.OutputObject
    >;
    LoanedReturned: TypedContractEvent<
      LoanedReturnedEvent.InputTuple,
      LoanedReturnedEvent.OutputTuple,
      LoanedReturnedEvent.OutputObject
    >;

    "SwappedOnSushiswap(uint256,uint256,address,address)": TypedContractEvent<
      SwappedOnSushiswapEvent.InputTuple,
      SwappedOnSushiswapEvent.OutputTuple,
      SwappedOnSushiswapEvent.OutputObject
    >;
    SwappedOnSushiswap: TypedContractEvent<
      SwappedOnSushiswapEvent.InputTuple,
      SwappedOnSushiswapEvent.OutputTuple,
      SwappedOnSushiswapEvent.OutputObject
    >;

    "SwappedOnUniswap(uint256,uint256,address,address)": TypedContractEvent<
      SwappedOnUniswapEvent.InputTuple,
      SwappedOnUniswapEvent.OutputTuple,
      SwappedOnUniswapEvent.OutputObject
    >;
    SwappedOnUniswap: TypedContractEvent<
      SwappedOnUniswapEvent.InputTuple,
      SwappedOnUniswapEvent.OutputTuple,
      SwappedOnUniswapEvent.OutputObject
    >;

    "TradeExecuted(address,address,uint256,bytes)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
  };
}
